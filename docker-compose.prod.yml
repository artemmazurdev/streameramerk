version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streamyard-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - streamyard-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streamyard-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - streamyard-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: streamyard-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamyard-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Signaling Server
  signaling:
    build:
      context: ./signaling-server
      dockerfile: Dockerfile.prod
    container_name: streamyard-signaling-prod
    environment:
      NODE_ENV: production
      PORT: 5000
      REDIS_URL: redis://redis:6379
    depends_on:
      - redis
    networks:
      - streamyard-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Media Server
  media-server:
    build:
      context: ./media-server
      dockerfile: Dockerfile.prod
    container_name: streamyard-media-server-prod
    environment:
      NODE_ENV: production
      PORT: 6000
      RTC_MIN_PORT: 40000
      RTC_MAX_PORT: 49999
      ANNOUNCED_IP: ${PUBLIC_IP}
    ports:
      - "6000:6000"
      - "40000-49999:40000-49999/udp"
      - "40000-49999:40000-49999/tcp"
    networks:
      - streamyard-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  # RTMP Relay
  rtmp-relay:
    build:
      context: ./rtmp-relay
      dockerfile: Dockerfile.prod
    container_name: streamyard-rtmp-prod
    ports:
      - "1935:1935"
    networks:
      - streamyard-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Frontend (Nginx serving static files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: streamyard-frontend-prod
    depends_on:
      - backend
      - signaling
    networks:
      - streamyard-network
    restart: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: streamyard-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - certbot-data:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
      - signaling
    networks:
      - streamyard-network
    restart: always

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: streamyard-certbot
    volumes:
      - certbot-data:/etc/letsencrypt
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}
    networks:
      - streamyard-network

volumes:
  postgres_data_prod:
  redis_data_prod:
  certbot-data:

networks:
  streamyard-network:
    driver: bridge



