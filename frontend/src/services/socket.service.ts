import { io, Socket } from 'socket.io-client';

const SIGNALING_URL = import.meta.env.VITE_SIGNALING_URL || 'ws://localhost:5000';

type EventCallback = (...args: any[]) => void;

class SocketService {
  private socket: Socket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;

  connect(broadcastId: string, userId: string): Promise<void> {
    return new Promise((resolve, reject) => {
      this.socket = io(SIGNALING_URL, {
        transports: ['websocket'],
        auth: {
          broadcastId,
          userId,
        },
      });

      this.socket.on('connect', () => {
        console.log('‚úÖ Connected to signaling server');
        this.reconnectAttempts = 0;
        resolve();
      });

      this.socket.on('connect_error', (error) => {
        console.error('‚ùå Connection error:', error);
        this.reconnectAttempts++;
        
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
          reject(new Error('Failed to connect to signaling server'));
        }
      });

      this.socket.on('disconnect', (reason) => {
        console.log('üîå Disconnected from signaling server:', reason);
      });

      this.socket.on('error', (error) => {
        console.error('Socket error:', error);
      });
    });
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ broadcast –∫–æ–º–Ω–∞—Ç–µ
  joinBroadcast(broadcastId: string, userData: any) {
    this.emit('join-broadcast', { broadcastId, userData });
  }

  // –í—ã—Ö–æ–¥ –∏–∑ broadcast –∫–æ–º–Ω–∞—Ç—ã
  leaveBroadcast(broadcastId: string) {
    this.emit('leave-broadcast', { broadcastId });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SDP offer
  sendOffer(targetId: string, offer: RTCSessionDescriptionInit) {
    this.emit('webrtc-offer', { targetId, offer });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SDP answer
  sendAnswer(targetId: string, answer: RTCSessionDescriptionInit) {
    this.emit('webrtc-answer', { targetId, answer });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ ICE candidate
  sendIceCandidate(targetId: string, candidate: RTCIceCandidateInit) {
    this.emit('ice-candidate', { targetId, candidate });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  startBroadcast(broadcastId: string) {
    this.emit('start-broadcast', { broadcastId });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  endBroadcast(broadcastId: string) {
    this.emit('end-broadcast', { broadcastId });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  sendChatMessage(broadcastId: string, message: string) {
    this.emit('chat-message', { broadcastId, message });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω, –∫–∞–º–µ—Ä–∞)
  updateParticipantStatus(status: { audioEnabled: boolean; videoEnabled: boolean; screenSharing: boolean }) {
    this.emit('participant-status', status);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event: string, callback: EventCallback) {
    if (this.socket) {
      this.socket.on(event, callback);
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event: string, callback?: EventCallback) {
    if (this.socket) {
      this.socket.off(event, callback);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
  emit(event: string, data?: any) {
    if (this.socket) {
      this.socket.emit(event, data);
    } else {
      console.warn('Socket not connected');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.socket?.connected || false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∫–µ—Ç–∞
  getId(): string | undefined {
    return this.socket?.id;
  }
}

export default new SocketService();



