name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: streamyard
          POSTGRES_PASSWORD: streamyard_password
          POSTGRES_DB: streamyard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install workspace dependencies
      run: npm run install:all

    - name: Run linter
      run: npm run lint --if-present

    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://streamyard:streamyard_password@localhost:5432/streamyard_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret

    - name: Build projects
      run: npm run build

  docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Build Docker images
      run: docker-compose build

    - name: Start services
      run: docker-compose up -d

    - name: Wait for services
      run: sleep 30

    - name: Check services health
      run: |
        curl -f http://localhost:4000/health || exit 1
        curl -f http://localhost:5000/health || exit 1
        curl -f http://localhost:6000/health || exit 1

    - name: Stop services
      run: docker-compose down



